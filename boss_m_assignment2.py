"""
Name: Madeline Boss
Date: 9/4/25
Assignment: 1
Due Date: 9/26/25
About this project: The goal of this assignment is to parse through Apache logs and display results such as the top most used and most downloaded.
Assumptions: Assume user inputs the correct file path and valid dates. Assume that authorized user in the log is '-'
All work below was performed solely by Madeline Boss.
I [did use ] code generated by an AI tool. (to create the log_pattern)

Plan:
Make a function that will use regex (a pattern matching library) to match patterns in the log files. 
"""

import sys
import re
from collections import Counter

#i did not copy exactly, but i used AI to help me design the log pattern, as well as understand the regex library
log_pattern = re.compile(
    r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+'  #looking for a pattern that follows "1-3 digits.1-3 digits.1-3digits" -- the ip address format  
    r'(-)\s+'                          #looking for the first -, which is the ident
    r'(-)\s+'                          #looking for authorized user, in all examples proved have been '-'
   #r'(\[\d{2}/\w{3}/\d{4}:\d{2}:\d{2}:\d{2} +d{4}\]\)'     #looking for date and time pattern
    r'\[(\d{2}/\w{3}/\d{4}:\d{2}:\d{2}:\d{2} [+-]\d{4})\]\s+'
    r'"(\w{1,4} .+? HTTP/\d\.\d)"\s+'                    #looking for request
    r'(\d{3})\s+'                      #looking for HTTP response code
    r'(\d{1,20})'                   #looking for bytes
)


def parse_logs(log:str):
    ip_add = Counter()
    resource = Counter()

    match = log_pattern.match(log)
    if match:
        ip_add[match.group(1)] += 1
        resource[match.group(5)] += 1

    return ip_add, resource

def main():
    #---Creating Variables----------------------------------------------------------------------------#
    #defualt inputs
    start_date = "01/01/0000"   
    end_date = "12/30/9999"
    #filepath should always be the second argument
    logFilePath = sys.argv[1]

    if len(sys.argv) >= 3:
        #if there is a third argument, that is the start date
        start_date = sys.argv[2]
    if len(sys.argv) >= 4:
        #if there is a foruth argument, that is the end date
        end_date = sys.argv[3]

    #personal check to see that it is grabbing the right arguments
    print("Log File Path: ",logFilePath)
    print("Start Date: ", start_date)
    print("End Date: ", end_date)

    ips = Counter()
    resources = Counter()

    #checking that the file is open
    with open(logFilePath, 'r') as apache_file:
        for line in apache_file:
            ip_count, resource_count = parse_logs(line)
            ips.update(ip_count)
            resources.update(resource_count)

    print("Top 14 most active hosts:")
    i = 0
    for i, (ip, count) in enumerate(ips.most_common(14), start = 1):
        print(f"No. {i}: {ip} : {count}")

if __name__ == "__main__":
    main()